package org.joda.time.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    int i0 = org.joda.time.chrono.IslamicChronology.AH;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    // The following exception was thrown during execution in test generation
    try {
    long long9 = islamicChronology1.getDateTimeMillis((int)(short)1, 0, 0, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DurationField durationField5 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.ReadablePartial readablePartial2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array4 = islamicChronology1.get(readablePartial2, (long)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType0);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    // The following exception was thrown during execution in test generation
    try {
    long long10 = islamicChronology1.getDateTimeMillis((int)(short)10, 10, (int)(byte)100, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    org.joda.time.ReadablePeriod readablePeriod7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array10 = islamicChronology1.get(readablePeriod7, 0L, (long)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    // The following exception was thrown during execution in test generation
    try {
    long long7 = islamicChronology1.getDateTimeMillis((int)(short)-1, (int)(byte)100, (int)(short)100, (int)(byte)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.ReadablePartial readablePartial3 = null;
    int[] i_array8 = new int[] { (byte)-1, (byte)0, ' ', '#' };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial3, i_array8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.ReadablePeriod readablePeriod4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePeriod4, (long)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.ReadablePartial readablePartial6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePartial6, (long)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePeriod6, (long)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.ReadablePeriod readablePeriod4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePeriod4, (long)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.ReadablePartial readablePartial6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePartial6, (long)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis(0L, 100, (int)(short)100, (int)(byte)10, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfCentury();
    org.joda.time.ReadablePartial readablePartial10 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long12 = islamicChronology1.set(readablePartial10, (long)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField17 = islamicChronology11.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.ReadablePeriod readablePeriod9 = null;
    long long12 = islamicChronology1.add(readablePeriod9, 0L, (int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 0L);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.millisOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long19 = islamicChronology10.getDateTimeMillis((int)(short)100, (int)(byte)1, (int)(byte)100, (int)' ', (int)(short)0, (int)(short)100, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.ReadablePeriod readablePeriod3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePeriod3, (-10L), (long)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.ReadablePeriod readablePeriod5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array7 = islamicChronology3.get(readablePeriod5, (long)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array15 = islamicChronology1.get(readablePeriod12, 100L, (long)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstance();
    // The following exception was thrown during execution in test generation
    try {
    long long8 = islamicChronology0.getDateTimeMillis(10, (int)(short)100, (int)(short)0, (int)(byte)100, (int)' ', 10, (int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    // The following exception was thrown during execution in test generation
    try {
    long long25 = islamicChronology19.getDateTimeMillis((-1L), 1, (int)(byte)100, (int)(short)100, (int)' ');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.ReadablePartial readablePartial4 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long6 = islamicChronology1.set(readablePartial4, (long)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.ReadablePartial readablePartial14 = null;
    int[] i_array16 = new int[] { 0 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial14, i_array16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array16);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.ReadablePartial readablePartial14 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long16 = islamicChronology1.set(readablePartial14, (long)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis((int)'4', (int)(short)100, 100, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology2.getLeapYearPatternType();
    org.joda.time.DurationField durationField4 = islamicChronology2.seconds();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology2.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfEra();
    boolean b8 = leapYearPatternType0.equals((java.lang.Object)dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    long long7 = islamicChronology1.add((long)(byte)0, (long)0, 0);
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField5 = islamicChronology1.days();
    org.joda.time.DurationField durationField6 = islamicChronology1.minutes();
    // The following exception was thrown during execution in test generation
    try {
    long long12 = islamicChronology1.getDateTimeMillis((long)1, (int)(byte)-1, (int)'4', (int)(short)-1, (int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    org.joda.time.ReadablePartial readablePartial6 = null;
    int[] i_array9 = new int[] { (short)100, 10 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology3.validate(readablePartial6, i_array9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array9);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis((long)'4', (int)' ', 0, (int)(short)-1, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long19 = islamicChronology1.getDateTimeMillis((int)(byte)1, (-1), 1, 10, (int)(short)100, (int)(byte)0, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    org.joda.time.DurationField durationField6 = islamicChronology3.days();
    org.joda.time.ReadablePartial readablePartial7 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long9 = islamicChronology3.set(readablePartial7, (-42497798822000L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long19 = islamicChronology1.getDateTimeMillis(10, (int)(byte)-1, (int)'4', (int)(byte)0, (int)(byte)-1, 100, (int)'a');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    long long11 = islamicChronology1.add(0L, (long)(short)0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.weekyears();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology11 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.ReadablePartial readablePartial12 = null;
    int[] i_array19 = new int[] { '4', 0, '4', (short)100, (byte)1, (short)100 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial12, i_array19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType15 = islamicChronology14.getLeapYearPatternType();
    org.joda.time.DurationField durationField16 = islamicChronology14.seconds();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology14.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology14.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology14.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology14.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology14.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology14.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology14.era();
    boolean b24 = islamicChronology1.equals((java.lang.Object)islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    // The following exception was thrown during execution in test generation
    try {
    long long10 = islamicChronology1.getDateTimeMillis((int)(byte)100, (int)(byte)100, (int)(short)0, (int)(short)1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    long long9 = islamicChronology5.add((-42497798822000L), (long)1, (int)(byte)-1);
    org.joda.time.ReadablePartial readablePartial10 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long12 = islamicChronology5.set(readablePartial10, 0L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-42497798822001L));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    java.lang.String str6 = islamicChronology5.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DurationField durationField9 = islamicChronology7.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.ReadablePeriod readablePeriod7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePeriod7, 100L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.minuteOfDay();
    org.joda.time.ReadablePartial readablePartial12 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long14 = islamicChronology10.set(readablePartial12, (long)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DurationField durationField9 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology5.get(readablePeriod6, (-42497798822001L), (-1L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    java.lang.Object obj20 = null;
    boolean b21 = leapYearPatternType17.equals(obj20);
    org.joda.time.DateTimeZone dateTimeZone22 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType24 = islamicChronology23.getLeapYearPatternType();
    org.joda.time.DurationField durationField25 = islamicChronology23.seconds();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology23.hourOfHalfday();
    boolean b27 = leapYearPatternType17.equals((java.lang.Object)islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.ReadablePartial readablePartial5 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long7 = islamicChronology1.set(readablePartial5, 1L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis((int)' ', 0, 0, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfCentury();
    int i10 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.ReadablePeriod readablePeriod11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array14 = islamicChronology1.get(readablePeriod11, (-1L), (long)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    long long11 = islamicChronology1.add((long)(-1), 0L, (int)(short)100);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array15 = islamicChronology1.get(readablePeriod12, (-10L), (-10L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis((int)(short)1, (int)(short)-1, (int)(short)100, 1, (int)' ', (int)(byte)10, 1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField13 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.weekyears();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology11 = islamicChronology1.withZone(dateTimeZone8);
    // The following exception was thrown during execution in test generation
    try {
    long long19 = islamicChronology1.getDateTimeMillis((int)(short)0, (int)' ', 100, (int)(byte)10, (int)(short)-1, 100, (int)'#');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology11);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.dayOfYear();
    // The following exception was thrown during execution in test generation
    try {
    long long10 = islamicChronology1.getDateTimeMillis(10L, 0, (int)(byte)-1, 10, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology1.halfdayOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long38 = islamicChronology1.getDateTimeMillis(10, 10, (int)'#', (int)' ', (-1), (int)'4', 100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DurationField durationField6 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
    org.joda.time.ReadablePeriod readablePeriod2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array4 = islamicChronology0.get(readablePeriod2, (long)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long14 = islamicChronology1.getDateTimeMillis((long)(short)1, (int)(byte)100, 0, (int)(byte)1, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    long long4 = islamicChronology0.add(0L, (long)0, (int)(short)1);
    org.joda.time.ReadablePeriod readablePeriod5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology0.get(readablePeriod5, (long)' ', 10L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.minuteOfDay();
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType9 = islamicChronology8.getLeapYearPatternType();
    org.joda.time.DurationField durationField10 = islamicChronology8.seconds();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology8.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology8.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology8.millisOfSecond();
    org.joda.time.Chronology chronology14 = islamicChronology8.withUTC();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.Chronology chronology16 = islamicChronology8.withZone(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology8.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology8.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology8.secondOfDay();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology8.hourOfHalfday();
    boolean b21 = islamicChronology5.equals((java.lang.Object)islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
    org.joda.time.DateTimeZone dateTimeZone7 = islamicChronology6.getZone();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology9.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType13 = islamicChronology12.getLeapYearPatternType();
    boolean b14 = leapYearPatternType10.equals((java.lang.Object)leapYearPatternType13);
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7, leapYearPatternType10);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
    org.joda.time.Chronology chronology18 = islamicChronology1.withZone(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField14 = islamicChronology1.eras();
    long long18 = islamicChronology1.add((long)(byte)10, (long)1, (int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 42L);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    long long7 = islamicChronology1.add((long)(byte)0, (long)0, 0);
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    org.joda.time.ReadablePeriod readablePeriod5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array7 = islamicChronology1.get(readablePeriod5, (-1L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekyearOfCentury();
    // The following exception was thrown during execution in test generation
    try {
    long long14 = islamicChronology1.getDateTimeMillis((long)4, (int)'#', (int)(short)100, 100, (int)(byte)10);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfCentury();
    int i10 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DurationField durationField11 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.yearOfEra();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    org.joda.time.DurationField durationField9 = islamicChronology7.seconds();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology7.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology7.millisOfSecond();
    org.joda.time.Chronology chronology13 = islamicChronology7.withUTC();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.Chronology chronology15 = islamicChronology7.withZone(dateTimeZone14);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DurationField durationField19 = islamicChronology17.seconds();
    org.joda.time.DurationField durationField20 = islamicChronology17.years();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology17.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology17.minuteOfDay();
    boolean b23 = islamicChronology7.equals((java.lang.Object)islamicChronology17);
    org.joda.time.DurationField durationField24 = islamicChronology7.eras();
    boolean b25 = islamicChronology1.equals((java.lang.Object)durationField24);
    org.joda.time.ReadablePartial readablePartial26 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long28 = islamicChronology1.set(readablePartial26, (long)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfMinute();
    org.joda.time.ReadablePartial readablePartial10 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long12 = islamicChronology1.set(readablePartial10, (long)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.ReadablePartial readablePartial2 = null;
    int[] i_array5 = new int[] { 10, (byte)100 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial2, i_array5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    // The following exception was thrown during execution in test generation
    try {
    long long25 = islamicChronology11.getDateTimeMillis((int)(short)1, 0, (int)(short)0, (int)(byte)0, (int)'#', 10, 1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField9 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.DurationField durationField18 = islamicChronology1.eras();
    org.joda.time.ReadablePartial readablePartial19 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long21 = islamicChronology1.set(readablePartial19, (long)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
    org.joda.time.ReadablePartial readablePartial2 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long4 = islamicChronology0.set(readablePartial2, (long)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology13.hourOfDay();
    java.lang.String str31 = islamicChronology13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str31.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.year();
    org.joda.time.DurationField durationField12 = islamicChronology1.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology1.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField5 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfCentury();
    int i10 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField12 = islamicChronology1.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology13.hourOfDay();
    org.joda.time.ReadablePartial readablePartial31 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long33 = islamicChronology13.set(readablePartial31, (long)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.ReadablePartial readablePartial7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePartial7, (-42497798822001L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePeriod6, (long)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.ReadablePeriod readablePeriod7 = null;
    long long10 = islamicChronology1.add(readablePeriod7, (long)(byte)100, (int)'4');
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField15 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.centuryOfEra();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.DurationField durationField6 = islamicChronology1.months();
    org.joda.time.DurationField durationField7 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod13 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array16 = islamicChronology12.get(readablePeriod13, 0L, (long)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.ReadablePartial readablePartial30 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array32 = islamicChronology1.get(readablePartial30, (long)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    long long19 = islamicChronology1.add((long)(short)100, (long)(byte)0, 0);
    // The following exception was thrown during execution in test generation
    try {
    long long24 = islamicChronology1.getDateTimeMillis((int)'a', (int)(short)-1, (int)(short)0, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 100L);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    int i8 = islamicChronology1.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    long long19 = islamicChronology1.add((long)(short)100, (long)(byte)0, 0);
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array23 = islamicChronology1.get(readablePeriod20, (-42497798822000L), (long)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 100L);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DurationField durationField12 = islamicChronology11.halfdays();
    java.lang.String str13 = islamicChronology11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str13.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DurationField durationField16 = islamicChronology7.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    org.joda.time.DurationField durationField9 = islamicChronology7.seconds();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology7.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology7.millisOfSecond();
    org.joda.time.Chronology chronology13 = islamicChronology7.withUTC();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.Chronology chronology15 = islamicChronology7.withZone(dateTimeZone14);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DurationField durationField19 = islamicChronology17.seconds();
    org.joda.time.DurationField durationField20 = islamicChronology17.years();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology17.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology17.minuteOfDay();
    boolean b23 = islamicChronology7.equals((java.lang.Object)islamicChronology17);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType24 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4, leapYearPatternType24);
    org.joda.time.DurationField durationField26 = islamicChronology25.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField26);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.hourOfDay();
    org.joda.time.DurationField durationField3 = islamicChronology1.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePartial readablePartial12 = null;
    int[] i_array18 = new int[] { (byte)10, ' ', (byte)100, (short)100, (short)-1 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial12, i_array18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    // The following exception was thrown during execution in test generation
    try {
    long long11 = islamicChronology1.getDateTimeMillis(0, (int)'4', 1, (int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DurationField durationField20 = islamicChronology19.eras();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN;
    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology2 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone1);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology2.getLeapYearPatternType();
    org.joda.time.DurationField durationField4 = islamicChronology2.seconds();
    org.joda.time.DurationField durationField5 = islamicChronology2.years();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology2.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology2.yearOfCentury();
    org.joda.time.Chronology chronology8 = islamicChronology2.withUTC();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology2.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology2.millisOfSecond();
    boolean b11 = leapYearPatternType0.equals((java.lang.Object)islamicChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField15 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField7 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    long long26 = islamicChronology1.getDateTimeMillis(100, 4, (int)(byte)10, (int)(byte)0, 10, (-1), (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.DurationField durationField18 = islamicChronology1.eras();
    org.joda.time.DurationField durationField19 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    long long21 = islamicChronology11.add((long)(byte)10, (long)4, (int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 410L);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.days();
    org.joda.time.ReadablePartial readablePartial8 = null;
    int[] i_array14 = new int[] { (byte)-1, (byte)10, (short)0, 'a', (byte)-1 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial8, i_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology4.getZone();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    boolean b12 = leapYearPatternType8.equals((java.lang.Object)leapYearPatternType11);
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5, leapYearPatternType8);
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology13.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.millisOfDay();
    org.joda.time.DurationField durationField17 = islamicChronology13.centuries();
    boolean b18 = leapYearPatternType2.equals((java.lang.Object)durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology11.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField13 = islamicChronology1.halfdays();
    org.joda.time.DurationField durationField14 = islamicChronology1.weeks();
    org.joda.time.ReadablePartial readablePartial15 = null;
    int[] i_array20 = new int[] { (-1), 4, (byte)-1, (short)0 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial15, i_array20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology10.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.year();
    boolean b25 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType28 = islamicChronology27.getLeapYearPatternType();
    org.joda.time.DurationField durationField29 = islamicChronology27.seconds();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology27.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology27.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField32 = islamicChronology27.millisOfSecond();
    org.joda.time.Chronology chronology33 = islamicChronology27.withUTC();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.Chronology chronology35 = islamicChronology27.withZone(dateTimeZone34);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType36 = islamicChronology27.getLeapYearPatternType();
    org.joda.time.DurationField durationField37 = islamicChronology27.weeks();
    org.joda.time.DateTimeField dateTimeField38 = islamicChronology27.clockhourOfHalfday();
    boolean b39 = islamicChronology20.equals((java.lang.Object)islamicChronology27);
    org.joda.time.ReadablePartial readablePartial40 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long42 = islamicChronology27.set(readablePartial40, (long)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DurationField durationField19 = islamicChronology1.weeks();
    org.joda.time.DurationField durationField20 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField21 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField6 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.minuteOfHour();
    org.joda.time.DurationField durationField21 = islamicChronology19.weekyears();
    org.joda.time.DurationField durationField22 = islamicChronology19.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
    org.joda.time.DurationField durationField2 = islamicChronology0.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DurationField durationField16 = islamicChronology10.millis();
    org.joda.time.ReadablePartial readablePartial17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array19 = islamicChronology10.get(readablePartial17, (long)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    // The following exception was thrown during execution in test generation
    try {
    long long9 = islamicChronology1.getDateTimeMillis((int)(short)10, (int)(byte)10, (int)(short)-1, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DurationField durationField14 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField7 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType13 = islamicChronology12.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology12.secondOfDay();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology12.secondOfDay();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology12.hourOfHalfday();
    boolean b17 = leapYearPatternType5.equals((java.lang.Object)dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.year();
    boolean b25 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology20.minuteOfDay();
    org.joda.time.ReadablePartial readablePartial27 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long29 = islamicChronology20.set(readablePartial27, 42L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    long long11 = islamicChronology1.add((long)(byte)1, (long)(byte)100, (-1));
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == (-99L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfHour();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    org.joda.time.ReadablePartial readablePartial6 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long8 = islamicChronology3.set(readablePartial6, (long)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField12 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.millisOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology1.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfEra();
    org.joda.time.Chronology chronology10 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField11 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DurationField durationField19 = islamicChronology1.weeks();
    org.joda.time.DurationField durationField20 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    org.joda.time.DurationField durationField8 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology5.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology5.seconds();
    org.joda.time.DurationField durationField8 = islamicChronology5.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology5.yearOfCentury();
    boolean b11 = islamicChronology1.equals((java.lang.Object)dateTimeField10);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology1.add(readablePeriod12, 35L, (int)(short)10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.monthOfYear();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfEra();
    org.joda.time.Chronology chronology10 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField5 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    int i7 = islamicChronology1.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DurationField durationField12 = islamicChronology1.days();
    org.joda.time.ReadablePartial readablePartial13 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long15 = islamicChronology1.set(readablePartial13, (long)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField8 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField8 = islamicChronology1.hours();
    org.joda.time.DurationField durationField9 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.year();
    boolean b25 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.DateTimeZone dateTimeZone28 = islamicChronology27.getZone();
    org.joda.time.DateTimeField dateTimeField29 = islamicChronology27.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone30 = islamicChronology27.getZone();
    org.joda.time.DurationField durationField31 = islamicChronology27.hours();
    org.joda.time.DurationField durationField32 = islamicChronology27.years();
    org.joda.time.Chronology chronology33 = islamicChronology27.withUTC();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology35 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone34);
    org.joda.time.DateTimeZone dateTimeZone36 = islamicChronology35.getZone();
    org.joda.time.DateTimeZone dateTimeZone37 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology38 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone37);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType39 = islamicChronology38.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone40 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology41 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone40);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType42 = islamicChronology41.getLeapYearPatternType();
    boolean b43 = leapYearPatternType39.equals((java.lang.Object)leapYearPatternType42);
    org.joda.time.chrono.IslamicChronology islamicChronology44 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36, leapYearPatternType39);
    org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36);
    org.joda.time.DateTimeZone dateTimeZone46 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology47 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone46);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType48 = islamicChronology47.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone49 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology50 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone49);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType51 = islamicChronology50.getLeapYearPatternType();
    boolean b52 = leapYearPatternType48.equals((java.lang.Object)leapYearPatternType51);
    org.joda.time.chrono.IslamicChronology islamicChronology53 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36, leapYearPatternType51);
    org.joda.time.Chronology chronology54 = islamicChronology27.withZone(dateTimeZone36);
    org.joda.time.Chronology chronology55 = islamicChronology20.withZone(dateTimeZone36);
    org.joda.time.DurationField durationField56 = islamicChronology20.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField56);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    long long11 = islamicChronology1.add((long)(byte)1, (long)(byte)100, (-1));
    org.joda.time.DurationField durationField12 = islamicChronology1.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == (-99L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.hourOfDay();
    org.joda.time.ReadablePeriod readablePeriod3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePeriod3, (long)(short)1, (-1L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.DurationField durationField7 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DurationField durationField2 = islamicChronology0.weeks();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DurationField durationField8 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePeriod6, (long)'#', (long)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology10.yearOfEra();
    org.joda.time.DurationField durationField17 = islamicChronology10.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    java.lang.Object obj20 = null;
    boolean b21 = leapYearPatternType17.equals(obj20);
    java.lang.Object obj22 = null;
    boolean b23 = leapYearPatternType17.equals(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField7 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField11 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.ReadablePeriod readablePeriod11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array13 = islamicChronology1.get(readablePeriod11, (long)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfEra();
    org.joda.time.Chronology chronology10 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfWeek();
    int i6 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.DurationField durationField14 = islamicChronology1.eras();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType4 = islamicChronology3.getLeapYearPatternType();
    int i5 = islamicChronology3.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField12 = islamicChronology1.millis();
    org.joda.time.DurationField durationField13 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    org.joda.time.DurationField durationField9 = islamicChronology7.seconds();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology7.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology7.millisOfSecond();
    org.joda.time.Chronology chronology13 = islamicChronology7.withUTC();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.Chronology chronology15 = islamicChronology7.withZone(dateTimeZone14);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DurationField durationField19 = islamicChronology17.seconds();
    org.joda.time.DurationField durationField20 = islamicChronology17.years();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology17.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology17.minuteOfDay();
    boolean b23 = islamicChronology7.equals((java.lang.Object)islamicChronology17);
    org.joda.time.DurationField durationField24 = islamicChronology7.eras();
    boolean b25 = islamicChronology1.equals((java.lang.Object)durationField24);
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField27 = islamicChronology1.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.ReadablePartial readablePartial5 = null;
    int[] i_array12 = new int[] { (byte)10, (byte)100, (short)0, ' ', 10, 0 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial5, i_array12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array12);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DurationField durationField19 = islamicChronology1.weeks();
    org.joda.time.DurationField durationField20 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField21 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField23 = islamicChronology1.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.centuryOfEra();
    long long12 = islamicChronology1.add(0L, (long)(byte)10, (-1));
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DurationField durationField7 = islamicChronology1.centuries();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField9 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b11 = leapYearPatternType5.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.yearOfCentury();
    boolean b13 = leapYearPatternType2.equals((java.lang.Object)dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType4 = islamicChronology3.getLeapYearPatternType();
    // The following exception was thrown during execution in test generation
    try {
    long long9 = islamicChronology3.getDateTimeMillis((int)' ', 4, (int)'4', (int)(short)100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType4);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    org.joda.time.DurationField durationField9 = islamicChronology1.millis();
    org.joda.time.DurationField durationField10 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology12.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.Chronology chronology17 = islamicChronology1.withZone(dateTimeZone13);
    org.joda.time.ReadablePeriod readablePeriod18 = null;
    long long21 = islamicChronology1.add(readablePeriod18, (long)'#', (int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 35L);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    java.lang.String str5 = islamicChronology1.toString();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str5.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.era();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DurationField durationField20 = islamicChronology19.eras();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    org.joda.time.DurationField durationField8 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DurationField durationField16 = islamicChronology10.millis();
    org.joda.time.ReadablePeriod readablePeriod17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array19 = islamicChronology10.get(readablePeriod17, (long)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    org.joda.time.DurationField durationField5 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.centuryOfEra();
    org.joda.time.DurationField durationField8 = islamicChronology1.millis();
    org.joda.time.ReadablePartial readablePartial9 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long11 = islamicChronology1.set(readablePartial9, (-42497798822001L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    long long9 = islamicChronology5.add((-42497798822000L), (long)1, (int)(byte)-1);
    org.joda.time.DurationField durationField10 = islamicChronology5.millis();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology5.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-42497798822001L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePartial readablePartial21 = null;
    int[] i_array28 = new int[] { 4, (short)100, 10, (byte)-1, '4', (short)10 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology20.validate(readablePartial21, i_array28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    // The following exception was thrown during execution in test generation
    try {
    long long17 = islamicChronology12.getDateTimeMillis((int)(byte)100, (int)(short)1, (int)' ', (int)(short)100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology13.hourOfDay();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology13.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    long long10 = islamicChronology1.getDateTimeMillis((int)(short)1, (int)(short)10, (int)(byte)10, (int)(byte)0);
    org.joda.time.DurationField durationField11 = islamicChronology1.millis();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == (-42497798822000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.ReadablePeriod readablePeriod7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePeriod7, (long)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    long long12 = islamicChronology1.add((long)(-1), 0L, (int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == (-1L));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology5.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology5.seconds();
    org.joda.time.DurationField durationField8 = islamicChronology5.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology5.yearOfCentury();
    boolean b11 = islamicChronology1.equals((java.lang.Object)dateTimeField10);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology1.add(readablePeriod12, 35L, (int)(short)10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology1.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DurationField durationField2 = islamicChronology0.hours();
    org.joda.time.DurationField durationField3 = islamicChronology0.weekyears();
    org.joda.time.ReadablePartial readablePartial4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology0.get(readablePartial4, 0L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DurationField durationField6 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField7 = islamicChronology1.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DurationField durationField6 = islamicChronology5.halfdays();
    org.joda.time.DurationField durationField7 = islamicChronology5.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology12.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long15 = islamicChronology1.getDateTimeMillis((int)' ', (int)'a', (int)(byte)-1, (int)(short)10, (int)'#', (int)(byte)1, (int)(short)100);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.minuteOfHour();
    // The following exception was thrown during execution in test generation
    try {
    long long26 = islamicChronology19.getDateTimeMillis((long)'4', (-1), 100, (int)'a', 4);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DurationField durationField6 = islamicChronology5.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.secondOfDay();
    org.joda.time.ReadablePeriod readablePeriod17 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array20 = islamicChronology1.get(readablePeriod17, (long)0, (long)4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.secondOfDay();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField8 = islamicChronology1.eras();
    org.joda.time.DurationField durationField9 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField10 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology12.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    java.lang.String str6 = islamicChronology5.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.dayOfMonth();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology5.add(readablePeriod8, 0L, (int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    java.lang.String str13 = islamicChronology12.toString();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology12.weekyearOfCentury();
    org.joda.time.ReadablePeriod readablePeriod15 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array18 = islamicChronology12.get(readablePeriod15, 0L, (-99L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str13.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField4 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfHour();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.days();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    org.joda.time.ReadablePartial readablePartial9 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long11 = islamicChronology1.set(readablePartial9, (long)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.weekOfWeekyear();
    java.lang.String str13 = islamicChronology1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str13.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    long long4 = islamicChronology0.add(0L, (long)0, (int)(short)1);
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology0.weekOfWeekyear();
    int i7 = islamicChronology0.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.hourOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology1.getLeapYearPatternType();
    java.lang.String str4 = islamicChronology1.toString();
    org.joda.time.DurationField durationField5 = islamicChronology1.months();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str4.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField9 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.hourOfDay();
    org.joda.time.DurationField durationField11 = islamicChronology1.centuries();
    // The following exception was thrown during execution in test generation
    try {
    long long16 = islamicChronology1.getDateTimeMillis(0, (int)(byte)0, (int)(short)1, (int)'a');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfDay();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array10 = islamicChronology1.get(readablePeriod8, 1L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    long long17 = islamicChronology1.add((long)'#', (long)(short)10, 0);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology1.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.era();
    org.joda.time.ReadablePeriod readablePeriod16 = null;
    long long19 = islamicChronology1.add(readablePeriod16, (long)(byte)-1, (int)'4');
    org.joda.time.ReadablePartial readablePartial20 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array22 = islamicChronology1.get(readablePartial20, (long)4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == (-1L));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.hourOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology1.getLeapYearPatternType();
    java.lang.String str4 = islamicChronology1.toString();
    org.joda.time.DurationField durationField5 = islamicChronology1.months();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    org.joda.time.DurationField durationField9 = islamicChronology7.seconds();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology7.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology7.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology7.millisOfSecond();
    org.joda.time.Chronology chronology13 = islamicChronology7.withUTC();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.Chronology chronology15 = islamicChronology7.withZone(dateTimeZone14);
    boolean b16 = islamicChronology1.equals((java.lang.Object)dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str4.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = islamicChronology9.getZone();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType13 = islamicChronology12.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology15.getLeapYearPatternType();
    boolean b17 = leapYearPatternType13.equals((java.lang.Object)leapYearPatternType16);
    org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10, leapYearPatternType13);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.Chronology chronology21 = islamicChronology1.withZone(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology21);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    org.joda.time.DateTimeZone dateTimeZone18 = islamicChronology11.getZone();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18, leapYearPatternType21);
    java.lang.Object obj23 = null;
    boolean b24 = leapYearPatternType21.equals(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.clockhourOfHalfday();
    java.lang.String str13 = islamicChronology1.toString();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str13.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, (long)0, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.centuryOfEra();
    long long22 = islamicChronology11.getDateTimeMillis((long)4, (int)(byte)1, (int)(byte)0, (int)(byte)10, 10);
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology11.yearOfEra();
    org.joda.time.ReadablePeriod readablePeriod24 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array26 = islamicChronology11.get(readablePeriod24, (-53989990L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == (-53989990L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    boolean b15 = leapYearPatternType11.equals((java.lang.Object)leapYearPatternType14);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8, leapYearPatternType11);
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology17.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.DateTimeZone dateTimeZone21 = islamicChronology20.getZone();
    org.joda.time.DateTimeZone dateTimeZone22 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone22);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType24 = islamicChronology23.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType27 = islamicChronology26.getLeapYearPatternType();
    boolean b28 = leapYearPatternType24.equals((java.lang.Object)leapYearPatternType27);
    org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone21, leapYearPatternType24);
    boolean b30 = islamicChronology17.equals((java.lang.Object)leapYearPatternType24);
    org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4, leapYearPatternType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology31);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology10.getZone();
    org.joda.time.Chronology chronology16 = islamicChronology1.withZone(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.millisOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology10.centuries();
    long long18 = islamicChronology10.add((long)10, (long)'4', (int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 2714L);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    long long19 = islamicChronology10.add((long)(byte)100, (long)(-1), (int)(short)100);
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array23 = islamicChronology10.get(readablePeriod20, (long)100, (-42497798822000L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.ReadablePartial readablePartial5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array7 = islamicChronology1.get(readablePartial5, (long)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.DurationField durationField7 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.yearOfCentury();
    long long18 = islamicChronology1.add((-1L), (long)(short)10, (int)(byte)0);
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    org.joda.time.DateTimeZone dateTimeZone18 = islamicChronology11.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.Chronology chronology25 = islamicChronology11.withUTC();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology11.secondOfMinute();
    org.joda.time.DurationField durationField27 = islamicChronology11.eras();
    org.joda.time.DurationField durationField28 = islamicChronology11.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.year();
    org.joda.time.DurationField durationField7 = islamicChronology1.minutes();
    org.joda.time.Chronology chronology8 = islamicChronology1.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    java.lang.String str6 = islamicChronology5.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.dayOfWeek();
    org.joda.time.DurationField durationField8 = islamicChronology5.eras();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField19 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DurationField durationField7 = islamicChronology1.centuries();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField9 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.minuteOfHour();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.secondOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long21 = islamicChronology1.getDateTimeMillis(1, (int)(byte)10, 0, (int)(short)0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField5 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField11 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = islamicChronology1.days();
    org.joda.time.ReadablePeriod readablePeriod3 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePeriod3, (long)100, (long)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.minuteOfDay();
    int i12 = islamicChronology10.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.year();
    org.joda.time.DurationField durationField7 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField8 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    long long4 = islamicChronology0.add(0L, (long)0, (int)(short)1);
    org.joda.time.ReadablePeriod readablePeriod5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology0.get(readablePeriod5, (long)100, (long)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology11.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField4 = islamicChronology1.seconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DurationField durationField2 = islamicChronology0.weeks();
    org.joda.time.Chronology chronology3 = islamicChronology0.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology3);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    java.lang.String str6 = islamicChronology5.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.dayOfWeek();
    org.joda.time.DurationField durationField8 = islamicChronology5.eras();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.secondOfDay();
    org.joda.time.DurationField durationField23 = islamicChronology20.millis();
    boolean b24 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology20.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField10 = islamicChronology1.days();
    org.joda.time.DurationField durationField11 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.minuteOfHour();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.yearOfCentury();
    boolean b12 = islamicChronology1.equals((java.lang.Object)100L);
    org.joda.time.DurationField durationField13 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology11.add(readablePeriod12, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology11.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology11.millisOfDay();
    int i20 = islamicChronology11.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    java.lang.String str10 = islamicChronology1.toString();
    java.lang.String str11 = islamicChronology1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str10.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str11.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField8 = islamicChronology1.eras();
    org.joda.time.DurationField durationField9 = islamicChronology1.minutes();
    org.joda.time.DateTimeZone dateTimeZone10 = islamicChronology1.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DurationField durationField19 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.DateTimeZone dateTimeZone5 = islamicChronology4.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone5);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType7 = islamicChronology6.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType7);
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DurationField durationField10 = islamicChronology9.seconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.hourOfDay();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array11 = islamicChronology1.get(readablePeriod8, (long)(-1), (-10L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.ReadablePartial readablePartial2 = null;
    // The following exception was thrown during execution in test generation
    try {
    long long4 = islamicChronology1.set(readablePartial2, (long)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology3.get(readablePeriod6, 410L, (-53989990L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DurationField durationField20 = islamicChronology19.eras();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.weekyearOfCentury();
    org.joda.time.DurationField durationField22 = islamicChronology19.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology11.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.DateTimeZone dateTimeZone28 = islamicChronology27.getZone();
    org.joda.time.DateTimeZone dateTimeZone29 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone29);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType31 = islamicChronology30.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone32 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone32);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType34 = islamicChronology33.getLeapYearPatternType();
    boolean b35 = leapYearPatternType31.equals((java.lang.Object)leapYearPatternType34);
    org.joda.time.chrono.IslamicChronology islamicChronology36 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28, leapYearPatternType31);
    org.joda.time.chrono.IslamicChronology islamicChronology37 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
    org.joda.time.DateTimeZone dateTimeZone38 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology39 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone38);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType40 = islamicChronology39.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone41 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology42 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone41);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType43 = islamicChronology42.getLeapYearPatternType();
    boolean b44 = leapYearPatternType40.equals((java.lang.Object)leapYearPatternType43);
    org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28, leapYearPatternType43);
    org.joda.time.Chronology chronology46 = islamicChronology11.withZone(dateTimeZone28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology46);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.hourOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.weekOfWeekyear();
    // The following exception was thrown during execution in test generation
    try {
    long long21 = islamicChronology11.getDateTimeMillis((int)'#', (int)'4', 100, 4, (int)'4', (int)(byte)10, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.hourOfHalfday();
    long long14 = islamicChronology1.add(0L, 410L, 1);
    org.joda.time.DurationField durationField15 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 410L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    long long18 = islamicChronology1.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField9 = islamicChronology1.halfdays();
    org.joda.time.DurationField durationField10 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField19 = islamicChronology11.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    long long9 = islamicChronology1.add(readablePeriod6, (-99L), 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-99L));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.weekyears();
    org.joda.time.DurationField durationField6 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.hourOfHalfday();
    org.joda.time.DurationField durationField14 = islamicChronology11.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.ReadablePartial readablePartial8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array10 = islamicChronology1.get(readablePartial8, 1L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.millisOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology10.centuries();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    org.joda.time.DurationField durationField18 = islamicChronology16.seconds();
    org.joda.time.DurationField durationField19 = islamicChronology16.years();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology16.clockhourOfHalfday();
    long long25 = islamicChronology16.getDateTimeMillis((int)(short)1, (int)(short)10, (int)(byte)10, (int)(byte)0);
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology16.secondOfDay();
    boolean b27 = islamicChronology10.equals((java.lang.Object)dateTimeField26);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology10.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField29 = islamicChronology10.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == (-42497798822000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField29);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.secondOfDay();
    org.joda.time.DurationField durationField23 = islamicChronology20.millis();
    boolean b24 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DurationField durationField25 = islamicChronology20.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField25);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DurationField durationField12 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology11.halfdayOfDay();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology11.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    // The following exception was thrown during execution in test generation
    try {
    long long10 = islamicChronology1.getDateTimeMillis((int)'#', (int)(byte)-1, (int)(short)10, 4);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField6 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.DurationField durationField7 = islamicChronology1.seconds();
    int i8 = islamicChronology1.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.era();
    java.lang.String str6 = islamicChronology3.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.weekyearOfCentury();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array11 = islamicChronology3.get(readablePeriod8, 0L, (-10L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DurationField durationField7 = islamicChronology1.centuries();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = islamicChronology9.getZone();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology9.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone12 = islamicChronology9.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology15.getLeapYearPatternType();
    org.joda.time.DurationField durationField17 = islamicChronology15.seconds();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology15.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology15.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology15.millisOfSecond();
    org.joda.time.Chronology chronology21 = islamicChronology15.withUTC();
    org.joda.time.DateTimeZone dateTimeZone22 = null;
    org.joda.time.Chronology chronology23 = islamicChronology15.withZone(dateTimeZone22);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType26 = islamicChronology25.getLeapYearPatternType();
    org.joda.time.DurationField durationField27 = islamicChronology25.seconds();
    org.joda.time.DurationField durationField28 = islamicChronology25.years();
    org.joda.time.DateTimeField dateTimeField29 = islamicChronology25.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology25.minuteOfDay();
    boolean b31 = islamicChronology15.equals((java.lang.Object)islamicChronology25);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType32 = islamicChronology25.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology33 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12, leapYearPatternType32);
    org.joda.time.Chronology chronology34 = islamicChronology1.withZone(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology34);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DurationField durationField9 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField8 = islamicChronology1.eras();
    java.lang.String str9 = islamicChronology1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str9.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.hourOfDay();
    org.joda.time.DurationField durationField13 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.year();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DurationField durationField20 = islamicChronology19.eras();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.weekyearOfCentury();
    org.joda.time.Chronology chronology22 = islamicChronology19.withUTC();
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone23);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType25 = islamicChronology24.getLeapYearPatternType();
    org.joda.time.DurationField durationField26 = islamicChronology24.seconds();
    org.joda.time.DateTimeField dateTimeField27 = islamicChronology24.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology24.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField29 = islamicChronology24.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology24.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology24.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField32 = islamicChronology24.millisOfDay();
    org.joda.time.DateTimeField dateTimeField33 = islamicChronology24.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField34 = islamicChronology24.clockhourOfDay();
    boolean b35 = islamicChronology19.equals((java.lang.Object)dateTimeField34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField8 = islamicChronology1.centuries();
    org.joda.time.ReadablePeriod readablePeriod9 = null;
    long long12 = islamicChronology1.add(readablePeriod9, (long)1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 1L);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.secondOfDay();
    org.joda.time.DurationField durationField21 = islamicChronology19.weeks();
    org.joda.time.ReadablePeriod readablePeriod22 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array24 = islamicChronology19.get(readablePeriod22, (long)4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField6 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.year();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.hourOfHalfday();
    org.joda.time.DurationField durationField7 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.DurationField durationField7 = islamicChronology1.weeks();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array11 = islamicChronology1.get(readablePeriod8, 42L, (long)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology5.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology5.seconds();
    org.joda.time.DurationField durationField8 = islamicChronology5.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology5.yearOfCentury();
    boolean b11 = islamicChronology1.equals((java.lang.Object)dateTimeField10);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology1.add(readablePeriod12, 35L, (int)(short)10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DurationField durationField7 = islamicChronology1.centuries();
    // The following exception was thrown during execution in test generation
    try {
    long long12 = islamicChronology1.getDateTimeMillis((int)'a', (int)'a', 100, (int)(short)10);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField5 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePeriod6, (long)1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    long long9 = islamicChronology3.add(readablePeriod6, (long)(byte)100, (int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 100L);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.Chronology chronology25 = islamicChronology11.withUTC();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology11.secondOfMinute();
    org.joda.time.DurationField durationField27 = islamicChronology11.eras();
    org.joda.time.DurationField durationField28 = islamicChronology11.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField7 = islamicChronology1.seconds();
    // The following exception was thrown during execution in test generation
    try {
    long long13 = islamicChronology1.getDateTimeMillis((long)(short)-1, (-1), (int)(short)1, 10, (int)(short)10);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.ReadablePartial readablePartial5 = null;
    int[] i_array8 = new int[] { (short)1, 0 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial5, i_array8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array8);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfHour();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField10 = islamicChronology1.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    long long9 = islamicChronology5.add((-42497798822000L), (long)1, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology5.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-42497798822001L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.minuteOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType7 = islamicChronology5.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology5.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology5.getLeapYearPatternType();
    org.joda.time.DurationField durationField7 = islamicChronology5.seconds();
    org.joda.time.DurationField durationField8 = islamicChronology5.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology5.yearOfCentury();
    boolean b11 = islamicChronology1.equals((java.lang.Object)dateTimeField10);
    org.joda.time.ReadablePeriod readablePeriod12 = null;
    long long15 = islamicChronology1.add(readablePeriod12, 35L, (int)(short)10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.monthOfYear();
    java.lang.String str17 = islamicChronology1.toString();
    org.joda.time.DurationField durationField18 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str17.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    int i1 = islamicChronology0.getMinimumDaysInFirstWeek();
    org.joda.time.ReadablePeriod readablePeriod2 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array5 = islamicChronology0.get(readablePeriod2, (long)(short)10, (-1L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.secondOfDay();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField8 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.ReadablePeriod readablePeriod10 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array12 = islamicChronology1.get(readablePeriod10, (long)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.ReadablePartial readablePartial7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePartial7, 10L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.DurationField durationField18 = islamicChronology1.eras();
    org.joda.time.DurationField durationField19 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.secondOfMinute();
    org.joda.time.ReadablePeriod readablePeriod21 = null;
    long long24 = islamicChronology1.add(readablePeriod21, (long)' ', (int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 32L);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.monthOfYear();
    org.joda.time.DurationField durationField10 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfWeek();
    int i6 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.hourOfDay();
    org.joda.time.DurationField durationField8 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField17 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField8 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfEra();
    org.joda.time.DurationField durationField10 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.halfdayOfDay();
    org.joda.time.ReadablePeriod readablePeriod7 = null;
    long long10 = islamicChronology1.add(readablePeriod7, (-42497798822001L), (int)(short)0);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == (-42497798822001L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.millisOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology10.days();
    org.joda.time.DurationField durationField15 = islamicChronology10.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology1.minutes();
    org.joda.time.Chronology chronology15 = islamicChronology1.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology15);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfDay();
    // The following exception was thrown during execution in test generation
    try {
    long long17 = islamicChronology1.getDateTimeMillis((int)(short)-1, (int)(byte)10, 0, (int)(short)10, (int)(short)0, (int)' ', (int)'4');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType13 = islamicChronology12.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType16 = islamicChronology15.getLeapYearPatternType();
    org.joda.time.DurationField durationField17 = islamicChronology15.seconds();
    org.joda.time.DurationField durationField18 = islamicChronology15.years();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology15.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology15.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology15.secondOfDay();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology15.dayOfWeek();
    boolean b23 = leapYearPatternType13.equals((java.lang.Object)islamicChronology15);
    org.joda.time.chrono.IslamicChronology islamicChronology24 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType13);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology24.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    long long11 = islamicChronology1.add((long)(-1), 0L, (int)(short)100);
    org.joda.time.DurationField durationField12 = islamicChronology1.months();
    org.joda.time.DurationField durationField13 = islamicChronology1.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField6 = islamicChronology1.hours();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.minuteOfDay();
    int i9 = islamicChronology1.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    // The following exception was thrown during execution in test generation
    try {
    long long15 = islamicChronology1.getDateTimeMillis(4, (int)(short)0, (int)(byte)0, (int)(byte)10, 0, (int)(short)100, 10);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.year();
    boolean b25 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType28 = islamicChronology27.getLeapYearPatternType();
    org.joda.time.DurationField durationField29 = islamicChronology27.seconds();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology27.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology27.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField32 = islamicChronology27.millisOfSecond();
    org.joda.time.Chronology chronology33 = islamicChronology27.withUTC();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.Chronology chronology35 = islamicChronology27.withZone(dateTimeZone34);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType36 = islamicChronology27.getLeapYearPatternType();
    org.joda.time.DurationField durationField37 = islamicChronology27.weeks();
    org.joda.time.DateTimeField dateTimeField38 = islamicChronology27.clockhourOfHalfday();
    boolean b39 = islamicChronology20.equals((java.lang.Object)islamicChronology27);
    org.joda.time.DurationField durationField40 = islamicChronology27.minutes();
    org.joda.time.DateTimeField dateTimeField41 = islamicChronology27.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField42 = islamicChronology27.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField42);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    long long4 = islamicChronology0.add(0L, (long)0, (int)(short)1);
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology0.get(readablePeriod6, (long)100, (long)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology0.minuteOfHour();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology0.minuteOfHour();
    org.joda.time.Chronology chronology4 = islamicChronology0.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology4);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    long long7 = islamicChronology1.add((long)(byte)0, (long)0, 0);
    org.joda.time.DurationField durationField8 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.secondOfDay();
    org.joda.time.DurationField durationField21 = islamicChronology19.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    // The following exception was thrown during execution in test generation
    try {
    long long11 = islamicChronology1.getDateTimeMillis((int)'a', (int)(byte)1, (int)(short)-1, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField5 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.millis();
    org.joda.time.DurationField durationField8 = islamicChronology1.centuries();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    org.joda.time.DurationField durationField9 = islamicChronology1.centuries();
    org.joda.time.DurationField durationField10 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }

    org.joda.time.chrono.IslamicChronology islamicChronology0 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
    org.joda.time.DurationField durationField2 = islamicChronology0.hours();
    org.joda.time.DurationField durationField3 = islamicChronology0.weekyears();
    org.joda.time.DurationField durationField4 = islamicChronology0.halfdays();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology0.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology5.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekyear();
    int i9 = islamicChronology1.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology10.getZone();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology10.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone13 = islamicChronology10.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    org.joda.time.DurationField durationField18 = islamicChronology16.seconds();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology16.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology16.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology16.millisOfSecond();
    org.joda.time.Chronology chronology22 = islamicChronology16.withUTC();
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.Chronology chronology24 = islamicChronology16.withZone(dateTimeZone23);
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology26 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType27 = islamicChronology26.getLeapYearPatternType();
    org.joda.time.DurationField durationField28 = islamicChronology26.seconds();
    org.joda.time.DurationField durationField29 = islamicChronology26.years();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology26.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology26.minuteOfDay();
    boolean b32 = islamicChronology16.equals((java.lang.Object)islamicChronology26);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType33 = islamicChronology26.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology34 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13, leapYearPatternType33);
    org.joda.time.DurationField durationField35 = islamicChronology34.years();
    boolean b36 = islamicChronology1.equals((java.lang.Object)islamicChronology34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DurationField durationField11 = islamicChronology1.seconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone7);
    org.joda.time.DateTimeZone dateTimeZone9 = islamicChronology8.getZone();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology8.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology8.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone11);
    boolean b15 = leapYearPatternType5.equals((java.lang.Object)dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology20.secondOfDay();
    org.joda.time.DurationField durationField23 = islamicChronology20.millis();
    boolean b24 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology20.secondOfMinute();
    int i26 = islamicChronology20.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.secondOfDay();
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology19.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology9.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DurationField durationField7 = islamicChronology1.centuries();
    org.joda.time.DurationField durationField8 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.ReadablePartial readablePartial11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array13 = islamicChronology1.get(readablePartial11, 32L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField8 = islamicChronology1.hours();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.clockhourOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField4 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DurationField durationField7 = islamicChronology1.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology11.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    long long17 = islamicChronology1.add((long)'#', (long)(short)10, 0);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology1.secondOfMinute();
    org.joda.time.DurationField durationField19 = islamicChronology1.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.era();
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone10 = islamicChronology1.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    long long10 = islamicChronology1.getDateTimeMillis((int)(short)1, (int)(short)10, (int)(byte)10, (int)(byte)0);
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.DateTimeZone dateTimeZone14 = islamicChronology13.getZone();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone18);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType20 = islamicChronology19.getLeapYearPatternType();
    boolean b21 = leapYearPatternType17.equals((java.lang.Object)leapYearPatternType20);
    org.joda.time.chrono.IslamicChronology islamicChronology22 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14, leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.ReadablePeriod readablePeriod24 = null;
    long long27 = islamicChronology23.add(readablePeriod24, 1L, (int)'#');
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType28 = islamicChronology23.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField29 = islamicChronology23.yearOfCentury();
    boolean b30 = islamicChronology1.equals((java.lang.Object)islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == (-42497798822000L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    // The following exception was thrown during execution in test generation
    try {
    long long11 = islamicChronology3.getDateTimeMillis(410L, 0, (int)(short)100, (int)'4', 1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.era();
    int i6 = islamicChronology3.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.centuryOfEra();
    long long20 = islamicChronology1.add(2714L, (long)(short)0, (int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 2714L);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone6 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.DateTimeZone dateTimeZone15 = islamicChronology14.getZone();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone16);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology17.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    boolean b22 = leapYearPatternType18.equals((java.lang.Object)leapYearPatternType21);
    org.joda.time.chrono.IslamicChronology islamicChronology23 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15, leapYearPatternType18);
    boolean b24 = islamicChronology11.equals((java.lang.Object)leapYearPatternType18);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology11.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.DateTimeZone dateTimeZone28 = islamicChronology27.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
    org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
    org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
    org.joda.time.Chronology chronology32 = islamicChronology11.withZone(dateTimeZone28);
    java.lang.String str33 = islamicChronology11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str33.equals("IslamicChronology[America/Los_Angeles]"));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.ReadablePartial readablePartial5 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array7 = islamicChronology1.get(readablePartial5, (long)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology21 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone20);
    org.joda.time.DateTimeZone dateTimeZone22 = islamicChronology21.getZone();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology21.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone24 = islamicChronology21.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology25 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology27 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone26);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType28 = islamicChronology27.getLeapYearPatternType();
    org.joda.time.DurationField durationField29 = islamicChronology27.seconds();
    org.joda.time.DateTimeField dateTimeField30 = islamicChronology27.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology27.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField32 = islamicChronology27.millisOfSecond();
    org.joda.time.Chronology chronology33 = islamicChronology27.withUTC();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.Chronology chronology35 = islamicChronology27.withZone(dateTimeZone34);
    org.joda.time.DateTimeZone dateTimeZone36 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology37 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone36);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType38 = islamicChronology37.getLeapYearPatternType();
    org.joda.time.DurationField durationField39 = islamicChronology37.seconds();
    org.joda.time.DurationField durationField40 = islamicChronology37.years();
    org.joda.time.DateTimeField dateTimeField41 = islamicChronology37.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField42 = islamicChronology37.minuteOfDay();
    boolean b43 = islamicChronology27.equals((java.lang.Object)islamicChronology37);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType44 = islamicChronology37.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology45 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone24, leapYearPatternType44);
    boolean b46 = leapYearPatternType17.equals((java.lang.Object)leapYearPatternType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology7.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.halfdayOfDay();
    org.joda.time.DurationField durationField14 = islamicChronology11.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.weekyearOfCentury();
    org.joda.time.Chronology chronology10 = islamicChronology1.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    java.lang.String str5 = islamicChronology1.toString();
    long long9 = islamicChronology1.add(100L, 0L, (int)(short)100);
    org.joda.time.ReadablePartial readablePartial10 = null;
    int[] i_array14 = new int[] { (short)10, '4', (byte)-1 };
    // The following exception was thrown during execution in test generation
    try {
    islamicChronology1.validate(readablePartial10, i_array14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str5.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    long long19 = islamicChronology1.add((long)(short)100, (long)(byte)0, 0);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.ReadablePeriod readablePeriod21 = null;
    long long24 = islamicChronology1.add(readablePeriod21, 1L, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 1L);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DurationField durationField6 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.era();
    java.lang.String str6 = islamicChronology3.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology3.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.monthOfYear();
    org.joda.time.DurationField durationField10 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology10.yearOfEra();
    org.joda.time.DurationField durationField17 = islamicChronology10.days();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    java.lang.String str6 = islamicChronology1.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfDay();
    org.joda.time.DurationField durationField8 = islamicChronology1.centuries();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DurationField durationField9 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.ReadablePartial readablePartial6 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array8 = islamicChronology1.get(readablePartial6, 0L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    java.lang.String str6 = islamicChronology5.toString();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology5.dayOfMonth();
    org.joda.time.DurationField durationField8 = islamicChronology5.years();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology5.weekyearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology1.getLeapYearPatternType();
    // The following exception was thrown during execution in test generation
    try {
    long long14 = islamicChronology1.getDateTimeMillis(100L, (int)(short)100, 4, (int)(byte)1, (int)'a');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DurationField durationField15 = islamicChronology13.seconds();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology13.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology13.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology13.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology13.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod20 = null;
    long long23 = islamicChronology13.add(readablePeriod20, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology13.dayOfMonth();
    org.joda.time.Chronology chronology25 = islamicChronology13.withUTC();
    boolean b27 = islamicChronology13.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology13.yearOfCentury();
    boolean b29 = islamicChronology1.equals((java.lang.Object)islamicChronology13);
    org.joda.time.DurationField durationField30 = islamicChronology1.eras();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology1.minuteOfHour();
    long long35 = islamicChronology1.add((-10L), (long)(byte)-1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == (-110L));

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.year();
    org.joda.time.DurationField durationField8 = islamicChronology1.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType14 = islamicChronology13.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone15);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType17 = islamicChronology16.getLeapYearPatternType();
    boolean b18 = leapYearPatternType14.equals((java.lang.Object)leapYearPatternType17);
    org.joda.time.chrono.IslamicChronology islamicChronology19 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType17);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology19.minuteOfHour();
    org.joda.time.DurationField durationField21 = islamicChronology19.weekyears();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology19.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    // The following exception was thrown during execution in test generation
    try {
    long long9 = islamicChronology3.getDateTimeMillis((int)(byte)-1, (int)(short)100, (int)'#', 1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.DateTimeZone dateTimeZone14 = islamicChronology13.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.DurationField durationField17 = islamicChronology16.hours();
    boolean b18 = islamicChronology1.equals((java.lang.Object)durationField17);
    org.joda.time.DurationField durationField19 = islamicChronology1.eras();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField14 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.minuteOfHour();
    org.joda.time.ReadablePartial readablePartial4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array6 = islamicChronology1.get(readablePartial4, 32L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = islamicChronology1.hourOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType3 = islamicChronology1.getLeapYearPatternType();
    java.lang.String str4 = islamicChronology1.toString();
    org.joda.time.DurationField durationField5 = islamicChronology1.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str4.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeZone dateTimeZone9 = islamicChronology1.getZone();
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfWeek();
    int i6 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DurationField durationField7 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    boolean b6 = leapYearPatternType2.equals((java.lang.Object)leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance();
    boolean b8 = leapYearPatternType2.equals((java.lang.Object)islamicChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DurationField durationField13 = islamicChronology10.years();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.clockhourOfHalfday();
    boolean b15 = islamicChronology7.equals((java.lang.Object)islamicChronology10);
    long long19 = islamicChronology10.add((long)(byte)100, (long)(-1), (int)(short)100);
    long long23 = islamicChronology10.add((-42497798822000L), (long)(short)-1, (int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == (-42497798822000L));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    long long19 = islamicChronology1.add((long)(short)100, (long)(byte)0, 0);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField21 = islamicChronology1.weeks();
    org.joda.time.DateTimeZone dateTimeZone22 = islamicChronology1.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone22);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    long long9 = islamicChronology5.add((-42497798822000L), (long)1, (int)(byte)-1);
    org.joda.time.DurationField durationField10 = islamicChronology5.millis();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology5.millisOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology5.months();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-42497798822001L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.era();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DurationField durationField13 = islamicChronology11.seconds();
    org.joda.time.DurationField durationField14 = islamicChronology11.years();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology11.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology11.minuteOfDay();
    boolean b17 = islamicChronology1.equals((java.lang.Object)islamicChronology11);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType18 = islamicChronology11.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DateTimeField dateTimeField23 = islamicChronology20.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.year();
    boolean b25 = leapYearPatternType18.equals((java.lang.Object)islamicChronology20);
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology20.minuteOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType27 = islamicChronology20.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType27);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DurationField durationField8 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField8 = islamicChronology1.eras();
    org.joda.time.DurationField durationField9 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.ReadablePartial readablePartial11 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array13 = islamicChronology1.get(readablePartial11, (-42497798822001L));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone12);
    org.joda.time.DateTimeZone dateTimeZone14 = islamicChronology13.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.DurationField durationField17 = islamicChronology16.hours();
    boolean b18 = islamicChronology1.equals((java.lang.Object)durationField17);
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DurationField durationField5 = islamicChronology3.seconds();
    org.joda.time.DurationField durationField6 = islamicChronology3.days();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology3.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.secondOfDay();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfWeek();
    int i6 = islamicChronology1.getMinimumDaysInFirstWeek();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField8 = islamicChronology1.years();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.dayOfMonth();
    org.joda.time.ReadablePartial readablePartial7 = null;
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array9 = islamicChronology1.get(readablePartial7, (long)100);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DurationField durationField8 = islamicChronology1.centuries();
    org.joda.time.DurationField durationField9 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.millisOfSecond();
    org.joda.time.DurationField durationField8 = islamicChronology1.eras();
    org.joda.time.DurationField durationField9 = islamicChronology1.minutes();
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.clockhourOfDay();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology14 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone13);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType15 = islamicChronology14.getLeapYearPatternType();
    org.joda.time.DurationField durationField16 = islamicChronology14.seconds();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology14.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology14.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField19 = islamicChronology14.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology14.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod21 = null;
    long long24 = islamicChronology14.add(readablePeriod21, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology14.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology14.minuteOfDay();
    org.joda.time.DurationField durationField27 = islamicChronology14.days();
    org.joda.time.DateTimeField dateTimeField28 = islamicChronology14.weekOfWeekyear();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType29 = islamicChronology14.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology30 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology30);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology5 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology islamicChronology6 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology10.millisOfSecond();
    org.joda.time.Chronology chronology16 = islamicChronology10.withUTC();
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.Chronology chronology18 = islamicChronology10.withZone(dateTimeZone17);
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology20 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone19);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType21 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DurationField durationField22 = islamicChronology20.seconds();
    org.joda.time.DurationField durationField23 = islamicChronology20.years();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology20.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology20.minuteOfDay();
    boolean b26 = islamicChronology10.equals((java.lang.Object)islamicChronology20);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType27 = islamicChronology20.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone28 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone28);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType30 = islamicChronology29.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField31 = islamicChronology29.secondOfDay();
    org.joda.time.DurationField durationField32 = islamicChronology29.millis();
    boolean b33 = leapYearPatternType27.equals((java.lang.Object)islamicChronology29);
    org.joda.time.chrono.IslamicChronology islamicChronology34 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4, leapYearPatternType27);
    org.joda.time.DateTimeZone dateTimeZone35 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology36 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone35);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType37 = islamicChronology36.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField38 = islamicChronology36.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField39 = islamicChronology36.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField40 = islamicChronology36.clockhourOfHalfday();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType41 = islamicChronology36.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology42 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone4, leapYearPatternType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology42);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfDay();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField11 = islamicChronology1.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.era();
    java.lang.String str6 = islamicChronology3.toString();
    int i7 = islamicChronology3.getMinimumDaysInFirstWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology3.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "IslamicChronology[America/Los_Angeles]"+ "'", str6.equals("IslamicChronology[America/Los_Angeles]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DurationField durationField9 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField10 = islamicChronology1.months();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.minuteOfHour();
    org.joda.time.DurationField durationField8 = islamicChronology1.minutes();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology4 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone3);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType5 = islamicChronology4.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology7 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone6);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType8 = islamicChronology7.getLeapYearPatternType();
    boolean b9 = leapYearPatternType5.equals((java.lang.Object)leapYearPatternType8);
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2, leapYearPatternType5);
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology11.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology3 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone2);
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology3.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology3.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology3.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField11 = islamicChronology1.halfdays();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField9 = islamicChronology1.days();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.hourOfDay();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.millisOfDay();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType12 = islamicChronology1.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType12);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    long long19 = islamicChronology1.add((long)(short)100, (long)(byte)0, 0);
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DurationField durationField21 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology1.minuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.weekOfWeekyear();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.weekyear();
    long long9 = islamicChronology1.add((long)(-1), (long)(-1), (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField10 = islamicChronology1.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField10);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DurationField durationField4 = islamicChronology1.years();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.yearOfCentury();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology11 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone10);
    org.joda.time.DateTimeZone dateTimeZone12 = islamicChronology11.getZone();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology11.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone14 = islamicChronology11.getZone();
    org.joda.time.chrono.IslamicChronology islamicChronology15 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology islamicChronology16 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology islamicChronology17 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.chrono.IslamicChronology islamicChronology18 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14);
    org.joda.time.Chronology chronology19 = islamicChronology1.withZone(dateTimeZone14);
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology21 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone20);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType22 = islamicChronology21.getLeapYearPatternType();
    org.joda.time.DurationField durationField23 = islamicChronology21.seconds();
    org.joda.time.DateTimeField dateTimeField24 = islamicChronology21.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField25 = islamicChronology21.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField26 = islamicChronology21.millisOfSecond();
    org.joda.time.Chronology chronology27 = islamicChronology21.withUTC();
    org.joda.time.DateTimeZone dateTimeZone28 = null;
    org.joda.time.Chronology chronology29 = islamicChronology21.withZone(dateTimeZone28);
    org.joda.time.DateTimeZone dateTimeZone30 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology31 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone30);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType32 = islamicChronology31.getLeapYearPatternType();
    org.joda.time.DurationField durationField33 = islamicChronology31.seconds();
    org.joda.time.DurationField durationField34 = islamicChronology31.years();
    org.joda.time.DateTimeField dateTimeField35 = islamicChronology31.clockhourOfHalfday();
    org.joda.time.DateTimeField dateTimeField36 = islamicChronology31.minuteOfDay();
    boolean b37 = islamicChronology21.equals((java.lang.Object)islamicChronology31);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType38 = islamicChronology31.getLeapYearPatternType();
    org.joda.time.chrono.IslamicChronology islamicChronology39 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone14, leapYearPatternType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology39);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeZone dateTimeZone11 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.weekyear();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.clockhourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfWeek();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology10 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType11 = islamicChronology10.getLeapYearPatternType();
    org.joda.time.DurationField durationField12 = islamicChronology10.seconds();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology10.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField14 = islamicChronology10.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField15 = islamicChronology10.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology10.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod17 = null;
    long long20 = islamicChronology10.add(readablePeriod17, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField21 = islamicChronology10.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField22 = islamicChronology10.yearOfCentury();
    org.joda.time.DurationField durationField23 = islamicChronology10.weekyears();
    long long27 = islamicChronology10.add((long)(short)0, (long)(short)-1, (int)(byte)10);
    org.joda.time.DurationField durationField28 = islamicChronology10.weeks();
    org.joda.time.DurationField durationField29 = islamicChronology10.minutes();
    org.joda.time.DurationField durationField30 = islamicChronology10.seconds();
    boolean b31 = islamicChronology1.equals((java.lang.Object)islamicChronology10);
    org.joda.time.DurationField durationField32 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == (-10L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField32);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.weekyearOfCentury();
    org.joda.time.DurationField durationField8 = islamicChronology1.halfdays();
    org.joda.time.DurationField durationField9 = islamicChronology1.millis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)100L);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField17 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.yearOfCentury();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.year();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType6 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.halfdayOfDay();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.DateTimeField dateTimeField7 = islamicChronology1.dayOfYear();
    org.joda.time.ReadablePeriod readablePeriod8 = null;
    long long11 = islamicChronology1.add(readablePeriod8, (long)10, (int)(byte)-1);
    org.joda.time.DateTimeField dateTimeField12 = islamicChronology1.dayOfMonth();
    org.joda.time.Chronology chronology13 = islamicChronology1.withUTC();
    boolean b15 = islamicChronology1.equals((java.lang.Object)true);
    org.joda.time.DateTimeField dateTimeField16 = islamicChronology1.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.DurationField durationField10 = islamicChronology1.millis();
    org.joda.time.DurationField durationField11 = islamicChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType2 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DurationField durationField3 = islamicChronology1.seconds();
    org.joda.time.DateTimeField dateTimeField4 = islamicChronology1.minuteOfDay();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeField dateTimeField6 = islamicChronology1.millisOfSecond();
    org.joda.time.Chronology chronology7 = islamicChronology1.withUTC();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.Chronology chronology9 = islamicChronology1.withZone(dateTimeZone8);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType10 = islamicChronology1.getLeapYearPatternType();
    org.joda.time.DateTimeField dateTimeField11 = islamicChronology1.secondOfDay();
    org.joda.time.DurationField durationField12 = islamicChronology1.weeks();
    org.joda.time.DateTimeField dateTimeField13 = islamicChronology1.weekOfWeekyear();
    long long17 = islamicChronology1.add((long)'#', (long)(short)10, 0);
    org.joda.time.DateTimeField dateTimeField18 = islamicChronology1.secondOfMinute();
    org.joda.time.DateTimeZone dateTimeZone19 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField20 = islamicChronology1.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 35L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.IslamicChronology islamicChronology1 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField3 = islamicChronology1.dayOfMonth();
    org.joda.time.DateTimeZone dateTimeZone4 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField5 = islamicChronology1.yearOfCentury();
    org.joda.time.DurationField durationField6 = islamicChronology1.weekyears();
    org.joda.time.DateTimeZone dateTimeZone7 = islamicChronology1.getZone();
    org.joda.time.DateTimeField dateTimeField8 = islamicChronology1.hourOfHalfday();
    org.joda.time.DateTimeField dateTimeField9 = islamicChronology1.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

}
